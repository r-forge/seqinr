\documentclass{svmult}
% Springer-Verlag style for multiauthors books

\SweaveOpts{prefix.string=figs/seqinr}


\begin{document}

\newcommand{\seqinr}{\texttt{seqin\bf{R}}}
\newcommand{\Seqinr}{\texttt{Seqin\bf{R}}}

% SeqinR adds
\mainmatter              % start of the contributions
%
\title{\Seqinr{}: a contributed package to the R project for statistical
computing devoted to biological sequences retrieval and analysis}
%
\titlerunning{\Seqinr{}}  % abbreviated title (for running head)
%                                     also used for the TOC unless
%                                     \toctitle is used
%
\author{Delphine Charif\inst{1}, Jean R. Lobry\inst{1} }
%
\authorrunning{D. Charif \& J.R. Lobry}   % abbreviated author list (for running head)
%
%%%% modified list of authors for the TOC (add the affiliations)
\tocauthor{Delphine Charif (Universit\'{e} Claude Bernard - Lyon I), Jean R. Lobry (Universit\'{e} Claude Bernard - Lyon I)}
%
\institute{Universit\'{e} Claude Bernard - Lyon I\\
Laboratoire de Biom\'{e}trie, Biologie \'{E}volutive\\
CNRS UMR 5558 - INRIA Helix project\\
43 Bd 11/11/1918\\F-69622 VILLEURBANNE CEDEX, FRANCE\\
\texttt{http://pbil.univ-lyon1.fr/members/lobry/}
}

\maketitle              % typeset the title of the contribution

\begin{abstract}
The \seqinr{} package for the R environment is a library of
utilities to retrieve and analyse biological sequences. It provides an
interface between i) the R language and environment for statistical
computing and graphics and ii) the ACNUC sequence retrieval system for
nucleotide and protein sequence databases such as GenBank, EMBL,
SWISS-PROT. ACNUC is very efficient in providing direct access to
subsequences of biological interest (e.g. protein coding regions, tRNA
or rRNA coding regions) present in GenBank and in EMBL. Thanks to a
simple query language, it is then easy under R to select sequences of
interest and then use all the power of the R environment to analyze
them. The ACNUC databases can be locally installed but they are more
conveniently accessed through a web server to take advantage of
centralized daily updates. The aim of this paper is to provide a
handout on basic sequence analyses under \seqinr{} with a special focus
on multivariate methods.
\end{abstract}

\section{Introduction}

\subsection{About R and CRAN}

R \cite{R, RfromR} is a \emph{libre} language and environment for statistical computing and graphics 
which provides a wide variety of statistical and graphical techniques: linear and 
nonlinear modelling, statistical tests, time series analysis, classification, clustering, etc. 
Please consult the R project homepage at \texttt{http://www.R-project.org/} for 
further information. 

<<nmirrors, echo = FALSE>>=
nmirrors <- function( url = paste(getOption("CRAN"), "mirrors.html", sep="/") )
{
  readLines(url) -> tmp
  dtab <- grep("<table", tmp)
  ftab <- grep("</table", tmp)
  if( length(dtab) != length(ftab) )
  {
    stop("Unbalanced table while reading file")
  }
  if( ! all(ftab - dtab > 0) )
  {
    stop("overlapping table marks")
  }
  nm <- 0
  for( i in 1:length(dtab) )
  {
    nm <- nm + length(grep("http:", tmp[dtab[i]:ftab[i]]))
  }
  nm <- nm / 2
  return( list( nm = nm, nc = length(dtab) ) )
}
@
 
 The Comprehensive R Archive Network, CRAN, is a network of servers 
 around the world that store identical, up-to-date, versions of code and documentation 
 for R.
At compilation time of this document, there were \Sexpr{nmirrors()$nm} mirrors available 
from \Sexpr{nmirrors()$nc} countries.
Please use the CRAN mirror nearest to you to minimize network load, they are
listed at \texttt{http://cran.r-project.org/mirrors.html}.

\subsection{About this document}

In the terminology of the R project \cite{R, RfromR}, this document is a package \emph{vignette}.
The examples given thereafter were run under \texttt{\Sexpr{R.version.string}}
on \Sexpr{date()} with Sweave \cite{Sweave}.
The last compiled version of this document is distributed along with the \seqinr{}
package in the \texttt{/doc} folder. Once \seqinr{} has been installed, the
full path to the package is given by the following R code :

<<whereisdoc>>=
.find.package("seqinr")
@

\subsection{About sequin and \seqinr{}}

Sequin is the well known sofware used to submit sequences to GenBank, \seqinr{}
has definitively no connection with sequin. \seqinr{} is just a shortcut, with
no google hit, for "Sequences in R".

However, as a mnemotechnic tip, you may think about the \seqinr{} package
as the {\bf{R}}eciprocal function of sequin: with sequin you can submit sequences
to Genbank, with \seqinr{} you can {\bf{R}}etrieve sequences from Genbank. This is
a very good summary of a major functionality of the \seqinr{} package: to
provide an efficient access to sequence databases under R.

\subsection{About getting started}

You need a computer connected to the Internet. First, install R on your computer.
There are pre-compiled binary distributions for Linux, Mac and Windows users
on the CRAN (\texttt{http://cran.r-project.org}). Then, install the \texttt{ade4}
and the \texttt{seqinr} packages. This can be done directly in an R console
with the commands \texttt{install.packages("ade4")} and 
\texttt{install.packages("seqinr")}. Last, load the \seqinr{} package
with:

<<seqinr>>=
library(seqinr)
@

The command \texttt{lseqinr()} lists all what is defined in the package \seqinr{}:

<<lseqinr>>=
lseqinr()[1:9]
@

We have printed here only the first 9 entries because they are too numerous.
To get help on a specific function, say \texttt{aaa()}, just prefix its name
with a question mark, as in \texttt{?aaa} and press enter.

%
% How to get sequences
%
\section{How to get sequence data}

\subsection{Simple import from fasta files}

\subsection{Complex queries in ACNUC databases}

There is a utility in \seqinr{} called \texttt{get.db.growth()}
to get some basic statistics about the size of DNA databases from their
last release:

<<dbg, fig = TRUE>>=
dbg <- get.db.growth()
plot(x = dbg$date,
  y = log10(dbg$Nucl),
  main = "The growth of DNA databases",
  xlab = "Year",
  ylab = "Log10 number of nucleotides")
@

As a rule of thumb, after compression one nucleotide needs one octet
of disk space storage (because you need also the annotations corresponding
to the sequences), so that most likely you won't have enough space on
your computer to work with a local copy of a complete DNA database. 
\\
\\
\begin{enumerate}
	\item Firstly, you have to select the database to be queried using the {\bfseries choosebank()} function.
	This function initiates remote access to an acnuc database.
\\
<<choixbanque1>>=
mybank = choosebank()
mybank
@
\\
<<choixbanque2>>=
bank = choosebank(mybank[1])
bank
@
\\
{\bfseries choosebank()} returns a list with the following components:
The details of the socket connection.
totseqs, totspec, totkey which are respectively the total number of sequences, species, keywords in the opened database.
\\
\\ 
	\item Secondly, you have to compose your query.  
In the example below, genbank was choosen, and we want to select sequences from cat (\textit{ sp=felis catus}) that are also (\textit{et}) coding sequences (\textit{t=cds}) and that are not (\textit{et no}) partial sequences (\textit{k=partial}). We want the result to be stored in an object called list1.
\\
<<query1>>=
query(bank$socket,"list1","sp=felis catus et t=cds et no k=partial")
@
\\
\\
The sequence names that fit the request are given in the req component of our object list1. We can see that the first sequence that fits our request is AB000483.PE1:
\\
<<query2>>=
list1$req[[1]]
@
\\
We can see that the first and second sequences that fit our request are AB000483.PE1 and AB000484.PE1 
\\
<<query3>>=
list1$req[1:2]
@

An important point is that the component call of our object list1 keep a trace of the way we have selected the sequences. At this stage you can quit your R session saving the workspace image. The next time we open an R session restauring the workspace image, there will be an object called list1, and looking into its call component will tell us that it contains the names of complete coding sequences from Felis catus.


\end{enumerate}


\section{How to deals with sequence}

\subsection{Sequence classes}


There are at present three classes of sequences, depending on the way they were obtained:

\begin{itemize}
      \item {\bfseries seqFasta} is the class for the sequences that were imported from a fasta file
      \item {\bfseries seqAcnucWeb} is the class for the sequences coming from an ACNUC database server
      \item {\bfseries seqFrag} is the class for the sequences that are fragments of other sequences
\end{itemize}

\subsection{Generic methods for sequences}

All sequence classes are sharing a common interface, so that there are very few method names we have to remember. 
In addition, all classes have their specific as.ClassName method that return an instance of the class,
and is.ClassName method to check whether an object belongs or not to the class. 
Available methods are: 
\\
\\
\begin{tabular}{|@{} c @{}|@{} c @{}|@{} c @{}|}
\hline
{\bfseries Methods} & {\bfseries Result} & {\bfseries Type of result} \\
\hline \hline
{\bfseries getFrag} & a sequence fragment & a sequence fragment \\
\hline
{\bfseries getSequence} & the sequence & vector of characters \\
\hline
{\bfseries getName} & the name of a sequence & string \\
\hline
{\bfseries getLength} & the length of a sequence & numeric vector \\
\hline
{\bfseries getTrans} & translation into amino-acids & vector of characters \\
\hline
{\bfseries getAnnot} & sequence annotations & vector of string \\
\hline
{\bfseries getLocation} & the Position of a Sequence on the Parent Sequence & list of numeric vector \\
\hline
\end{tabular}

\subsection{Internal representation of sequences}

The current mode of sequence storage is done with vectors of characters instead of strings.
This is very convenient for the user because all R tools to manipulate vectors are immediatly available. 
The price to pay is that this storage mode is extremly expensive in terms of memory.
They are two utilities called s2c and c2s that allows to convert strings into vector of characters, 
and vice-versa, respectively.



%
% Sequence analyses
%
\section{Manipulation of sequence data}
%
% Multivariate analyses
%
\section{Multivariate analyses}

\subsection{Correspondence analysis}

This is the most popular multivariate data analysis technique for amino-acid
and codon count tables. Its primary goal is to transform a table of counts
into a graphical display, in which each gene (or protein) and each codon (or amino-acid)
is depicted as a point. Correspondence analysis (CA) may be defined as a special 
case of principal components analysis (PCA) with a different underlying metrics.
The interest of the metrics in CA, that is the way we measure the distance between
two individuals, is illustrated bellow with a very simple example with only
three proteins having only three amino-acids, so that we can represent exactly
on a map the consequences of the metric choice.

<<df>>=
df <- data.frame(matrix(c(130, 60, 60, 70, 40, 35, 0, 0, 5), nrow=3))
names(df) <- c("Ala", "Val", "Cys")
df
@

Let's first use the regular Euclidian metrics,
\begin{equation}
d^2(i,i') = \sum_{i=1}^{I}(n_{ij} - n_{i'j})^2
\label{euclidian}
\end{equation}
to visualize this small data set:

<<euclidian, fig = TRUE>>=
pco <- dudi.pco(dist(df), scann = F, nf = 2)
myplot <- function( res, ... )
{
  plot(res$li[ , 1], res$li[ , 2], ...)
  text(x = res$li[ , 1], y = res$li[ , 2], labels = 1:3, pos = ifelse(res$li[ , 2] < 0, 1, 3))
  perm <- c(3, 1, 2)
  lines( c(res$li[ , 1], res$li[perm, 1]), c(res$li[ , 2], res$li[perm, 2]))
}
myplot(pco, main = "Euclidian distance", asp = 1, pch = 19, xlab = "", ylab = "")
@

From this point of view, the first individual is far away from the two others. But
thinking about it, this is a rather trivial effect of protein size:

<<protsize>>=
rowSums(df)
@

With \Sexpr{rowSums(df)[1]} amino-acids, the first protein is two times bigger 
than the others so that when computing the Euclidian distance (\ref{euclidian}) its $n_{ij}$ entries
are on average very big, sending it away from the others.
To get rid of this trivial effect, the first
obvious idea is to divide counts by protein lengths so as to work with 
\emph{protein profiles}. The corresponding distance is,

\begin{equation}
d^2(i,i') = \sum_{i=1}^{I}(\frac{n_{ij}}{n_{i\bullet}} - \frac{n_{i'j}}{n_{i'\bullet}})^2
\label{euclprof}
\end{equation}

where $n_{i\bullet}$ and $n_{i'\bullet}$ stands for the total number of amino-acids
in protein $i$ and $i'$, respectively.

<<profile, fig = TRUE>>=
df1 <- df/rowSums(df)
df1
dudi.pco(dist(df1), scann = F, nf = 2) -> pco1
myplot(pco1, main = "Euclidian distance on protein profiles", asp = 1, pch = 19, xlab = "", ylab = "",
  ylim = range(pco1$li[ , 2])*1.2)
@

The pattern is now completely different with the three protein equally spaced.
This is normal because in terms of relative amino-acid composition they are
all differing two-by-two by $5\%$ at the level of two amino-acids only. We
have clearly removed the trivial protein size effect, but this is still not completely
satisfactory. The proteins are differing by $5\%$ for all amino-acids but the situation 
is somewhat different for \texttt{Cys} because this amino-acid is very rare.
A difference of $5\%$ for a rare amino-acid has not the same significance than
a difference of $5\%$ for a common amino-acid such as \texttt{Ala} in our
example. To cope with this, CA make use of a variance-standardizing
technique to compensate for the larger variance in high frequencies and the 
smaller variance in low frequencies. This is achieved with the use of the 
\emph{chi-square distance} ($\chi^2$) which differs from the previous Euclidean distance 
on profiles (\ref{euclprof}) in that each square is weighted by the inverse of 
the frequency corresponding to each term,

\begin{equation}
d^2(i,i') = \sum_{i=1}^{I}\frac{1}{n_{{\bullet}j}}(\frac{n_{ij}}{n_{i\bullet}} - \frac{n_{i'j}}{n_{i'\bullet}})^2
\label{chi}
\end{equation}

where $n_{{\bullet}j}$ is the total number of amino-acid of kind $j$. With this point
of view, the map is now like this:

<<afc, fig = TRUE>>=
coa <- dudi.coa(df, scann = FALSE, nf = 2)
myplot(coa, main = expression(paste(chi^2,"distance")), 
  asp = 1, pch = 19, xlab = "", ylab = "")
@

The pattern is completely different with now protein number 3 which is far away from
the others because it is enriched in the rare amino-acid \texttt{Cys} as compared to
others.

%warning importance of metric choice (COA on RSCU)
%advantages of COA
% principe d'eqivalence distri
% biplot

<<scatter, fig = TRUE>>=
scatter(coa, clab.col = 0.75, clab.row = 0.6)
@
%
% ---- Bibliography ----
%
\begin{thebibliography}{5}
%

\bibitem{R}
Ihaka, R., Gentleman, R.:
R: A Language for Data Analysis and Graphics.
J. Comp. Graph. Stat. {\bf 3} (1996) 299--314

\bibitem{RfromR}
R Development Core Team:
R: A language and environment for statistical computing
(2004) ISBN 3-900051-00-3, http://www.R-project.org
   
\bibitem{Sweave}
Leisch, F.:
Sweave: Dynamic generation of statistical reports using literate data analysis.
Compstat 2002 --- Proceedings in Computational Statistics (2002) 575--580
ISBN 3-7908-1517-9.


\end{thebibliography}

\end{document}
