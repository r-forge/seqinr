\documentclass{article}
\input{../config/commontex}

\title{Importing sequences from ACNUC databases}

\author{Charif, D. \and Lobry, J.R.}

\begin{document}
\SweaveInput{../config/commonrnw.rnw}
\maketitle
\tableofcontents
% BEGIN - DO NOT REMOVE THIS LINE

\section{Introduction}

As a rule of thumb, after compression one nucleotide needs one octet
of disk space storage (because you need also the annotations corresponding
to the sequences), so that most likely you won't have enough space on
your computer to work with a local copy of a complete DNA database.
The idea is to import under \Rlogo{}~only the subset of sequences you are
interested in. This is done in three steps:
\begin{enumerate}
\item Choose the bank you want to work with.
\item Select the sequences you are interested in.
\item Retrieve sequences from server into your workspace.
\end{enumerate}
We now give a full example of those three steps under the ACNUC system
\cite{GautierC1982a, GautierC1982b, acnuc1984, acnuc1985, acnuc1985b}.

\subsection{Choose a bank}

Select the database from which you want to extract sequences with the \texttt{choosebank()} function.
This function initiates a remote access to an ACNUC database. Called without arguments,
\texttt{choosebank()} returns the list of available databases:

<<choixbanque1, eval=T>>=
choosebank()
@

Biological sequence databases are fast moving targets, and for publication purposes it is
recommended to specify on which release you were working on when you made the job.
To get more informations about available databases on the server, just set 
the \texttt{infobank} parameter to \texttt{TRUE}. For
instance, here is the result for the three first databases on the default server 
at the compilation time (\today) of this document:

<<choixbanquemoreinfo, eval=T>>=
choosebank(infobank = TRUE)[1:3, ]
@

Note that there is a \texttt{status} column because a database could be unavailable
for a while during updates. If you try call \texttt{choosebank(bank = "bankname")} 
when the bank called \texttt{bankname} is off from server, you will get an explicit 
error message stating that this bank is temporarily unavailable, for instance:

%
% Ca on est obligé de le mettre en dur parce que ca génère une erreur !
%
\begin{Schunk}
\begin{Sinput}
 choosebank("off")
\end{Sinput}
\begin{Soutput}
Error in choosebank("off") : Database with name -->off<-- is currently off for maintenance, 
please try again later.
\end{Soutput}
\end{Schunk}

Some special purpose databases are not listed by default. These are \textit{tagged} databases
that are only listed if you provide an explicit \texttt{tagbank} argument to the \texttt{choosebank()}
function. Of special interest for teaching purposes is the \texttt{TP} tag, an acronym for
\textit{Travaux Pratiques} which means "practicals", and corresponds to \emph{frozen}
databases so that you can set up a practical whose results are stable from year to year. Currently
available frozen databases at the default server are:

<<frozen, eval=T>>=
choosebank(tagbank = "TP", infobank = TRUE)
@

Now, if you want to work with a given database, say GenBank, just call \texttt{choosebank()}
with \texttt{"genbank"} as its first argument and store the result in a variable
in the workspace, called for instance \texttt{mybank} in the example thereafter:

<<choixbanque2, eval=T>>=
mybank <- choosebank("genbank")
str(mybank)
@

The list returned by \texttt{choosebank()} here means that in the database
called \texttt{\Sexpr{ifelse(exists("mybank"), mybank$bankname, "???")}} at the compilation time
of this document there were 
\texttt{\Sexpr{ifelse(exists("mybank"), formatC(as.integer(mybank$totseqs), big.mark=","), "???")}}
sequences from
\texttt{\Sexpr{ifelse(exists("mybank"), formatC(as.integer(mybank$totspecs), big.mark=","), "???")}}
species and a total of
\texttt{\Sexpr{ifelse(exists("mybank"), formatC(as.integer(mybank$totkeys), big.mark=","), "???")}}
keywords. The status of the bank was
\texttt{\Sexpr{ifelse(exists("mybank"), mybank$status, "???")}}, 
and the release information was
\texttt{\Sexpr{ifelse(exists("mybank"), mybank$release, "???")}}.
For specialized databases, some relevant informations are also given in the
\texttt{details} component, for instance:

<<exdetails,fig=F, eval=T>>=
choosebank("taxobacgen")$details -> moreinfo
cat(moreinfo, sep = "\n")
@

The previous command has a side-effect that is worth mentioning. 
As from \seqinr~1.0-3, the result of the \texttt{choosebank()} function is automatically
stored in a global variable named \texttt{banknameSocket}, so that if no socket argument
is given to the \texttt{query()} function, the last opened database will be used by default
for your requests.
This is just a matter of convenience so that you don't have to explicitly specify the details of the
socket connection when working with the last opened database. You have, however,
full control of the process since \texttt{choosebank()} returns (invisibly) all the
required details. There is no trouble to open \emph{simultaneously} many databases.
You are just limited by the number of simultaneous connections your build of \Rlogo{}~is
allowed\footnote{
As from \Rlogo{}~2.4.0 he maximum number of open connections has been increased from
50 to 128. Note also that 
there is a very convenient function called \texttt{closeAllConnections()} in the \Rlogo{}~base package if
you want to close all open connections at once.}.

For advanced users who may wish to access to more than one database at time, a good advice
is to close them with the function \texttt{closebank()} as soon as possible so that the maximum
number of simultaneous connections is never reached. In the example below, we want to
display the number of taxa (\textit{i.e.} the number of nodes) in the species taxonomy associated
with each available database (including frozen databases). For this, we loop over available databases and 
close them as soon as the information has been retrieved.

<<taxaperbank,fig=T,eval=T, eval=T>>=
banks <- c(choosebank(), choosebank(tagbank="TP"))
ntaxa <- numeric(0)
for(i in banks){
  ntaxa[i] <- as.numeric(choosebank(i)$totspecs)
  closebank()
}
dotchart(log10(ntaxa[order(ntaxa)]), pch = 19,
main = "Number of taxa in available databases",
xlab = "Log10(number of taxa)")
@

\subsection{Make your query}

For this section, set up the default bank to GenBank, so that you don't have 
to provide the sockets details for the \texttt{query()} function:

<<settogenbankbeforequery, eval=T>>=
choosebank("genbank")
@

Then, you have to say what you want, that is to compose a query
to select the subset of sequences you are interested in. The way to do this is
documented under \texttt{?query}, we just give here a simple example. 
In the query below, we want to select all the coding sequences 
(\texttt{t=cds}) from cat (\texttt{AND sp=felis catus}) that are not 
(\texttt{AND NOT}) partial sequences (\texttt{k=partial}). 
We want the result to be stored in an object called \texttt{completeCatsCDS}.

\marginpar{\includegraphics[width=\marginparwidth]{../figs/Feliscatus}\\
\tiny{\textit{Felis catus}. Source: wikipedia}}

<<query1,eval=T>>=
query("completeCatsCDS", "sp=felis catus AND t=cds AND NOT k=partial")
@

Now, there is in the workspace an object called \texttt{completeCatsCDS}, which
does not contain the sequences themselves but the \emph{sequence names} (and various relevant informations
such as the genetic code and the frame) that fit 
the query. They are stored in the \texttt{req} component of the object,
let's see the name of the first ten of them:

<<getNames,eval=T>>=
sapply(completeCatsCDS$req[1:10], getName)
@

The first sequence that fit our request is \texttt{\Sexpr{ifelse(exists("completeCatsCDS"), getName(completeCatsCDS$req[[1]]), "???")}},
the second one is \texttt{\Sexpr{ifelse(exists("completeCatsCDS"), getName(completeCatsCDS$req[[2]]), "???")}}, and so on. Note that
the sequence name may have an extension, this corresponds to \emph{subsequences},
a specificity of the ACNUC system that allows to handle easily a
subsequence with a biological meaning, typically a gene. The list of available subsequences
in a given database is given by the function \texttt{getType()}, for example the list
of available subsequences in GenBank is given in table \ref{genbank}.

%
% Besoin d'edition manuelle du fichier genbank.tex pour virer les caracteres spéciaux Latex, ici "_"
%
<<xtablegenbank, fig = FALSE, echo = FALSE,eval=FALSE>>=
choosebank("genbank") -> bank
tmp <- getType(bank$s)
tmp <- t(data.frame(tmp))
row.names(tmp)<-1:nrow(tmp)
names(tmp)<-NULL
colnames(tmp) <- c("Type","Description")
print(xtable(tmp, digits = rep(0,3), caption = paste("Available subsequences in", bank$bankname), label = "genbank"), 
file = "../tables/genbank.tex")
@
\input{../tables/genbank.tex}


The component \texttt{call} of \texttt{completeCatsCDS} keeps automatically a 
trace of the way you have selected the sequences: 

<<list1call,fig=F,eval=T>>=
completeCatsCDS$call
@

At this stage you can quit your \Rlogo{} 
session saving the workspace image. The next time an \Rlogo{}~session is opened with the 
workspace image restored, there will be an object called \texttt{completeCatsCDS}, and 
looking into its \texttt{call} component will tell you that it contains the names 
of complete coding sequences from \textit{Felis catus}.

In practice, queries for sequences are rarely done in one step and are more likely
to be the result of an iterative, progressively refining, process. An important point
is that a list of sequences can be re-used. For instance, we can re-use \texttt{completeCatsCDS}
to get only the list of sequences that were published in 2004:

<<query2,eval=T>>=
query("ccc2004", "completeCatsCDS AND y=2004")
length(ccc2004$req)
@

Hence, there were \Sexpr{ifelse(exists("ccc2004"), length(ccc2004$req), "???")} complete coding sequences published in 2004 for
\textit{Felis catus} in GenBank.

As from release 1.0-3 of the \seqinr{} package, there is new parameter \texttt{virtual}
which allows to disable the automatic retrieval of information for all list elements. This is interesting for list
with many elements, for instance :

<<queryvirtual,eval=T>>=
query("allcds", "t=cds", virtual = TRUE)
allcds$nelem
@

There are therefore \texttt{\Sexpr{ifelse(exists("allcds"), formatC(as.integer(allcds$nelem), big.mark=","), "???")}} coding
sequences in this version of GenBank\footnote{
which is stored in the \texttt{release} component of the object \texttt{banknameSocket}
and current value is today (\today): \texttt{banknameSocket\$release = 
\Sexpr{ifelse(exists("banknameSocket"), banknameSocket$release, "???")}}.
}. 
It would be long to get all the informations for the elements
of this list, so we have set the parameter \texttt{virtual} to \texttt{TRUE} and the \texttt{req}
component of the list has not been documented:

<<nodoc,eval=T>>=
allcds$req
@

However, the list can still be re-used\footnote{
of course, as long as the socket connection with the server has not been lost: virtual lists details are only
known by the server.}, 
for instance we may extract from this list all the sequences
from, say, \textit{Mycoplasma genitalium}:

<<chtouille,eval=T>>=
query("small", "allcds AND sp=mycoplasma genitalium", virtual = TRUE)
small$nelem
@

There are then \texttt{\Sexpr{ifelse(exists("small"), formatC(as.integer(small$nelem), big.mark=","), "???")}} elements in
the list \texttt{small}, so that we can safely repeat the previous query without asking for a
virtual list:

<<chtouille2,eval=T>>=
query("small", "allcds et sp=mycoplasma genitalium")
sapply(small$req, getName)[1:10]
@

Here are some illustrations of using virtual list to answer simple questions about the
current GenBank release.

\begin{description}
\item[\textbf{Man.}] How many sequences are available for our species?
<<man, eval=T>>=
query("man","sp=homo sapiens",virtual=T)
man$nelem
@
There are \texttt{\Sexpr{ifelse(exists("man"), formatC(man$nelem, big.mark=","), "???")}} sequences from \textit{Homo sapiens}.

\item[\textbf{Sex.}] How many sequences are annotated with a keyword starting by sex?
<<sex, eval=T>>=
query("sex","k=sex@",virtual=T)
sex$nelem
@
There are \texttt{\Sexpr{ifelse(exists("sex"), formatC(sex$nelem, big.mark=","), "???")}} such sequences.

\item[\textbf{tRNA.}] How many complete tRNA sequences are available?
<<trnacplt, eval=T>>=
query("trna","t=trna AND NOT k=partial",virtual=T)
trna$nelem
@
There are \texttt{\Sexpr{ifelse(exists("trna"), formatC(trna$nelem, big.mark=","), "???")}} complete tRNA sequences.

\item[\textbf{Nature vs. Science.}] In which journal were the more sequences published?
<<natvsscience, eval=T>>= 
query("nature","j=nature",virtual=T)
nature$nelem
query("science","j=science",virtual=T)
science$nelem
@
There are \texttt{\Sexpr{ifelse(exists("nature"), formatC(nature$nelem, big.mark=","), "???")}} sequences published
in \textit{Nature} and
\texttt{\Sexpr{ifelse(exists("science"), formatC(science$nelem, big.mark=","), "???")}} sequences published in
\textit{Science}, so that the winner is 
\textit{\Sexpr{ifelse(exists("nature"), ifelse(nature$nelem < science$nelem, "Science", "Nature"), "???")}}.

%
% \item[TriTryp] quand la ref de Science/309/404 sera dans genbank
%

\item[\textbf{Smith.}] How many sequences have Smith (last name) as author?
<<smith, eval=T>>=
query("smith","au=smith",virtual=T)
smith$nelem
@
There are \texttt{\Sexpr{ifelse(exists("smith"), formatC(smith$nelem, big.mark=","), "???")}} such sequences.

\item[\textbf{YK2.}] How many sequences were published after year 2000 (included)?
<<yk2, eval=T>>=
query("yk2","y>2000",virtual=T)
yk2$nelem
@
There are \texttt{\Sexpr{ifelse(exists("yk2"), formatC(yk2$nelem, big.mark=","), "???")}} sequences published after year 2000.

\item[\textbf{Organelle contest.}] Do we have more sequences from chloroplast genomes or from mitochondion genomes?
<<organelles, eval=T>>=
query("chloro","o=chloroplast",virtual=T)
chloro$nelem
query("mito","o=mitochondrion",virtual=T)
mito$nelem
@
There are \texttt{\Sexpr{ifelse(exists("chloro"), formatC(chloro$nelem, big.mark=","), "???")}} sequences from
chloroplast genomes and
\texttt{\Sexpr{ifelse(exists("mito"), formatC(mito$nelem, big.mark=","), "???")}} sequences from mitochondrion
genomes, so that the winner is 
\Sexpr{ifelse(exists("mito"), ifelse(chloro$nelem < mito$nelem, "mitochondrion", "chloroplast"), "???")}.


\end{description}

\subsection{Extract sequences of interest}

The sequence itself is obtained with the function \texttt{getSequence()}.
For example, the first 50 nucleotides of the first sequence of our request are:

<<getSequence, eval=T>>=
myseq <- getSequence(completeCatsCDS$req[[1]])
myseq[1:50]
@
They can also be coerced as string of character with the function \texttt{c2s()}:
<<SequenceAsString, eval=T>>=
c2s(myseq[1:50])
@
Note that what is done by \texttt{getSequence()} is much more complex
than a substring extraction because subsequences of biological interest are
not necessarily contiguous or even on the same DNA strand. Consider for
instance the following coding sequence from sequence \texttt{AE003734}:

<<transann,fig=F,eval=T>>=
query("trs","N=AE003734.PE35")
getAnnot(trs$req[[1]]) -> annots
cat(annots, sep="\n")
@

%\scriptsize
%\begin{verbatim}
%AE003734.PE35        Location/Qualifiers    (length=1833 bp)
%     CDS             join(complement(162997..163210),
%                     complement(162780..162919),complement(161238..162090),
%                     146568..146732,146806..147266)
%                     /gene="mod(mdg4)"
%                     /locus_tag="CG32491"
%                     /note="CG32491 gene product from transcript CG32491-RT;
%                     trans-splicing"
%\end{verbatim}
%\normalsize

To get the coding sequence manually you would have join 5 different pieces 
from \texttt{AE003734} and some of them are in the complementary strand. 
With \texttt{getSequence()} you don't have to think about this. Just make a
query with the sequence name:

<<transplicing1, eval=T>>=
query("transspliced", "N=AE003734.PE35")
length(transspliced$req)
getName(transspliced$req[[1]])
@

Ok, now there is in your workspace an object called \texttt{transspliced} which \texttt{req}
component is of length one (because you have asked for just one sequence) and the name of the
single element of the req component is \Sexpr{ifelse(exists("transspliced"), getName(transspliced$req[[1]]), "???")} (because this
is the name of the sequence you wanted). Let see the first 50 base of this sequence:

<<transsplicing2, eval=T>>=
getSequence(transspliced$req[[1]])[1:50]
@

All the complex transsplicing operations have been done here. You can check that there is no
in-frame stop codons\footnote{
Stop codons are represented by the character \texttt{*} when translated into protein.} 
with the \texttt{getTrans()} function to translate this coding sequence into protein:

<<transsplicing3, eval=T>>=
getTrans(transspliced$req[[1]])[1:50]
table(getTrans(transspliced$req[[1]]))
@

In a more graphical way:

<<transp4,fig=T, eval=T>>=
aacount <- table(getTrans(transspliced$req[[1]]))
aacount <- aacount[order(aacount)]
names(aacount) <- aaa(names(aacount))
dotchart(aacount, pch = 19, xlab = "Stop and amino-acid counts",
main = "There is only one stop codon in AE003734.PE35")
abline(v=1, lty = 2)
@

Note that the relevant variant of the genetic code was automatically set up during the translation
of the sequence into protein. This is because the \texttt{transspliced\$req[[1]]} object belongs to the 
\texttt{SeqAcnucWeb} class:

<<transsplicing4, eval=T>>=
class(transspliced$req[[1]])
@

Therefore, when you are using the \texttt{getTrans()} function, you are automatically redirected
to the \texttt{getTrans.SeqAcnucWeb()} function which knows how to take into account the relevant frame
and genetic code for your coding sequence.

\section{The query language}


\subsection{Where to find information}

The last version of the documentation for the query language is available online
at \url{http://pbil.univ-lyon1.fr/databases/acnuc/cfonctions.html#QUERYLANGUAGE}.
This documentation has been imported within the documentation of the
\texttt{query()} function, but the last available update is the online version.

\subsection{Case sensitivity and ambiguities resolution}

The query language is case insensitive, for instance:

<<lowervsupper,fig=F,eval=T>>=
choosebank("emblTP")
query("lowercase", "sp=escherichia coli", virtual = TRUE)
query("uppercase", "SP=Escherichia coli", virtual = TRUE)
lowercase$nelem == uppercase$nelem
closebank()
@

Three operators (AND, OR, NOT) 
can be ambiguous because they can also occur within valid criterion values. 
Such ambiguities can be solved by encapsulating elementary selection 
criteria between escaped double quotes. For example:

<<ambig,fig=F,eval=T>>=
choosebank("emblTP")
query("ambig","\"sp=Beak and feather disease virus\" AND \"au=ritchie\"", virtual = T)
ambig$nelem
closebank()
@

\subsection{Selection criteria}

\subsubsection{Introduction}

Selection criteria are in the form \texttt{c=something} (without space
before the = sign) or \texttt{list\_name} where \texttt{list\_name} is a
previously constructed list.

\subsubsection{\texttt{SP=taxon}}

This is used to select sequences attached to a given taxon or any other below in
the tree. The at sign @ substitutes as a wildcard character for any zero or more 
characters. Here are some examples:

<<borreliaexample,fig=F,eval=T>>=
choosebank("emblTP")
query("bb","sp=Borrelia burgdorferi",virtual=T)
bb$nelem
query("borrelia","sp=Borrelia",virtual=T)
borrelia$nelem
closebank()
@

Here is an example of use of the wildcard @ to look for sapiens species:

<<sapiens,fig=F,eval=T>>=
choosebank("emblTP")
query("sapiens","sp=@sapiens@",virtual=T)
sapiens$nelem
query("sapienspecies","PS sapiens")
sapply(sapienspecies$req, getName)
closebank()
@

\subsubsection{\texttt{TID=id}}

This is used to select sequences attached attached to a given numerical 
NCBI's taxonomy ID. For instance, the taxonomy ID for 
\textit{Homo sapiens neanderthalensis} is 63221:

\marginpar{\includegraphics[width=\marginparwidth]{../figs/hsn}\\
\tiny{\textit{Homo neanderthalensis}. Source: wikipedia}}

<<tidexample,fig=F,eval=T>>=
choosebank("genbank")
query("hsn","TID=63221", virtual=T)
hsn$nelem
query("hsnsp","PS hsn")
sapply(hsnsp$req, getName)
closebank()
@

\subsubsection{\texttt{K=keyword}}

This is used to select sequences attached to a given keyword or any other below in
the tree. The at sign @ substitutes as a wildcard character for any zero or more 
characters. Example:

<<exemplekw,fig=F,eval=T>>=
 choosebank("emblTP")
query("ecoliribprot","sp=escherichia coli AND k=rib@ prot@", virtual=T)
 ecoliribprot$nelem
closebank()
@

\subsubsection{\texttt{T=type}}

This is used to select sequences of specified type. The list of available
type for the currently opened database is given by function \texttt{getType()}:

<<getTypeexample,fig=F,eval=T>>=
choosebank("emblTP")
getType()
closebank()
@

For instance, to select all coding sequences from \textit{Homo sapiens} we can use:

<<allhscds,fig=F,eval=T>>=
choosebank("emblTP")
query("hscds","sp=Homo sapiens AND t=cds", virtual=T)
hscds$nelem
closebank()
@

\subsubsection{\texttt{J=journal\_name}}

This is used to select sequences published in journal specified using defined journal code.
For instance to select all sequences published in \textit{Science}:

<<allseqsfromscience,fig=F,eval=T>>=
choosebank("emblTP")
query("allseqsfromscience","J=Science", virtual=TRUE)
allseqsfromscience$nelem
closebank()
@

The list of available journal code can be obtained from the \texttt{readsmj()} function
this way:

<<journalcodes,fig=F,eval=T>>=
choosebank("emblTP")
nl <- readfirstrec(type = "SMJ")
smj <- readsmj(nl = nl, all.add = TRUE)
head(smj[!is.na(smj$nature) & smj$nature == "journal", c("sname","libel")])
closebank()
@

\subsubsection{\texttt{R=refcode}}

This is used to select sequences from a given bibliographical reference specified
as \texttt{jcode/volume/page}. For instance, to select sequences associated
with the first publication \cite{jrl0009} of the complete genome of \textit{Rickettsia prowazekii},
we can use:

<<refbibexample,fig=F,eval=T>>=
choosebank("emblTP")
query("rpro","R=Nature/396/133")
sapply(rpro$req,getName)
closebank()
@

\subsubsection{\texttt{AU=name}}

This is used to select sequences having a specified author (only last name, no initial).

<<authorexample,fig=F,eval=T>>=
choosebank("emblTP")
query("Graur","AU=Graur")
Graur$nelem
closebank()
@

\subsubsection{\texttt{AC=accession\_no}}

This is used to select sequences attached to specified accession number.
For instance if we are looking for sequences attached to the accession
number AY382159:

<<exampleAC,fig=F,eval=T>>=
choosebank("emblTP")
query("ACexample","AC=AY382159")
getName(ACexample$req[[1]])
annotations <- getAnnot(ACexample$req[[1]])
cat(annotations, sep ="\n")
closebank()
@

\subsubsection{\texttt{N=seq\_name}}

This is used to select sequences of a given name\footnote{
\textit{i.e.} what is documented in the ID or the LOCUS
field}. Sequences names are not necessarily stable, so that it's almost always
better to work with accession numbers. Anyway, the distinction between sequence names
and accession numbers is on a vanishing way because they tend more and
more to be the same thing (as in the example just below). 
The use of the at sign @ to substitute as a wildcard character for any zero or more characters 
is possible here.

<<exampleN,fig=F,eval=T>>=
choosebank("emblTP")
query("Nexample","N=AY382159")
getName(Nexample$req[[1]])
annotations <- getAnnot(Nexample$req[[1]])
cat(annotations, sep ="\n")
closebank()
@

\subsubsection{\texttt{Y=year} or \texttt{Y>year} or \texttt{Y<year}}

This is used to select sequences published in a given year (\texttt{Y=year}),
or in a given year and after this year (\texttt{Y>year}), or in a given
year and before this year (\texttt{Y<year}).

<<exampleY,fig=F,eval=T>>=
choosebank("emblTP")
query("Yexample","Y=1999", virtual=TRUE)
Yexample$nelem
closebank()
@

\subsubsection{\texttt{O=organelle}}

This is used to select sequences from specified organelle named following defined code 
(\textit{e.g.}, chloroplast).
The list of available organelle codes can be obtained from the \texttt{readsmj()} function
this way:

<<organellescodes,fig=F,eval=T>>=
choosebank("genbank")
 nl <- readfirstrec(type = "SMJ")
  smj <- readsmj(nl = nl, all.add = TRUE)
 smj[!is.na(smj$nature) & smj$nature == "organelle", c("sname","libel")]
closebank()
@

To select for instance all sequences from chloroplast genome we can use:

<<exampleO,fig=F,eval=T>>=
choosebank("emblTP")
query("Oexample","O=chloroplast", virtual=TRUE)
Oexample$nelem
closebank()
@

\subsubsection{\texttt{M=molecule}}

This is used to select sequences according to the chemical nature of the
sequenced molecule\footnote{as named in ID or LOCUS annotation records}.
The list of available organelle code can be obtained from the \texttt{readsmj()} function
this way:

<<moleculescodes,fig=F,eval=T>>=
choosebank("genbank")
 nl <- readfirstrec(type = "SMJ")
  smj <- readsmj(nl = nl, all.add = TRUE)
 smj[!is.na(smj$nature) & smj$nature == "molecule", c("sname","libel")]
closebank()
@

To select for instance all sequences sequenced from DNA we can use:

<<exampleM,fig=F,eval=T>>=
choosebank("emblTP")
query("Mexample","M=DNA", virtual=TRUE)
Mexample$nelem
closebank()
@

\subsubsection{\texttt{ST=status}}

This is used to select sequences from specified data class (EMBL) or review level (UniProt).
The list of status codes can be obtained from the \texttt{readsmj()} function
this way:

<<emblstatus,fig=F,eval=T>>=
choosebank("embl")
 nl <- readfirstrec(type = "SMJ")
  smj <- readsmj(nl = nl, all.add = TRUE)
 smj[!is.na(smj$nature) & smj$nature == "status", c("sname","libel")]
closebank()
choosebank("swissprot")
 nl <- readfirstrec(type = "SMJ")
  smj <- readsmj(nl = nl, all.add = TRUE)
 smj[!is.na(smj$nature) & smj$nature == "status", c("sname","libel")]
closebank()
@

To select for instance all fully annotated sequences from Uniprot we can use:

<<exampleST,fig=F,eval=T>>=
choosebank("swissprot")
query("STexample","ST=REVIEWED", virtual=TRUE)
STexample$nelem
closebank()
@

\subsubsection{\texttt{F=file\_name}}

This is used to select sequences whose names are in a given file, one name per line.
This is not directly implemented in seqinR, you have to use the function
\texttt{crelistfromclientdata()} or its short form \texttt{clfcd()} for this purpose. Here is an example with
a file of sequence names distributed with the seqinR package:

<<filesqexample,fig=F,eval=T>>=
choosebank("emblTP")
fileSQ <- system.file("sequences/bb.mne", package = "seqinr")
cat(readLines(fileSQ),sep="\n")
clfcd("listSQ", file = fileSQ, type = "SQ")
sapply(listSQ$req, getName)
closebank()
@


\subsubsection{\texttt{FA=file\_name}}

This is used to select sequences whose accession numbers are in a given file, one name per line.
This is not directly implemented in seqinR, you have to use the function
\texttt{crelistfromclientdata()} or its short form \texttt{clfcd()} for this purpose. Here is an example with
a file of sequence accession numbers distributed with the seqinR package:

<<fileACCexample,fig=F,eval=T>>=
choosebank("emblTP")
fileAC <- system.file("sequences/bb.acc", package = "seqinr")
cat(readLines(fileAC),sep="\n")
clfcd("listAC", file = fileAC, type = "AC")
sapply(listAC$req, getName)
closebank()
@


\subsubsection{\texttt{FK=file\_name}}

This is used to produces the list of keywords named in given file, one keyword per line.
This is not directly implemented in seqinR, you have to use the function
\texttt{crelistfromclientdata()} or its short form \texttt{clfcd()} for this purpose. Here is an example with
a file of keywords distributed with the seqinR package:

<<fileKWexample,fig=F,eval=T>>=
choosebank("emblTP")
fileKW <- system.file("sequences/bb.kwd", package = "seqinr")
cat(readLines(fileKW),sep="\n")
clfcd("listKW", file = fileKW, type = "KW")
sapply(listKW$req, getName) 
closebank()
@

\subsubsection{\texttt{FS=file\_name}}

This is used to produces the list of species named in given file, one species per line.
This is not directly implemented in seqinR, you have to use the function
\texttt{crelistfromclientdata()} or its short form \texttt{clfcd()} for this purpose. Here is an example with
a file of species names distributed with the seqinR package:

<<fileSPexample,fig=F,eval=T>>=
choosebank("emblTP")
fileSP <- system.file("sequences/bb.sp", package = "seqinr")
cat(readLines(fileSP),sep="\n")
clfcd("listSP", file = fileSP, type = "SP")
sapply(listSP$req, getName) 
closebank()
@

\subsubsection{\texttt{list\_name}}

A list name can be re-used, for instance:

<<examplereuselistname,fig=F,eval=T>>=
choosebank("emblTP")
query("MyFirstListName", "Y=2000", virtual = TRUE)
MyFirstListName$nelem
query("MySecondListName", "SP=Borrelia burgdorferi", virtual = TRUE)
MySecondListName$nelem
query("MyThirdListName", "MyFirstListName AND MySecondListName", virtual = TRUE)
MyThirdListName$nelem
closebank()
@
 
\subsection{Operators} 

\subsubsection{\texttt{AND}}

This is the binary operator for the logical and: a sequence belongs to the 
resulting list if, and only if, it is present in both operands. To select
for instance sequences from \textit{Borrelia burgdorferi} that are
also coding sequences we can use:

<<exampleAND,fig=F,eval=T>>=
choosebank("emblTP")
query("ANDexample","SP=Borrelia burgdorferi AND T=CDS", virtual=TRUE)
ANDexample$nelem
closebank()
@


\subsubsection{\texttt{OR}}

This is the binary operator for the logical or: a sequence belongs to the 
resulting list if it is present in at least one of the two operands. To select
for instance sequences from \textit{Borrelia burgdorferi} or
from \textit{Escherichia coli} we can use:

<<exampleOR,fig=F,eval=T>>=
choosebank("emblTP")
query("ORexample","SP=Borrelia burgdorferi OR SP=Escherichia coli", virtual=TRUE)
ORexample$nelem
closebank()
@

\subsubsection{\texttt{NOT}}

This is the unary operator for the logical negation. To select
for instance sequences from \textit{Borrelia burgdorferi} that
are not partial we can use:

<<exampleOR,fig=F,eval=T>>=
choosebank("emblTP")
query("NOTexample","SP=Borrelia burgdorferi AND NOT K=PARTIAL", virtual=TRUE)
NOTexample$nelem
closebank()
@

\subsubsection{\texttt{PAR}}

This is a unary operator to compute the list of parent sequences of a list
of sequences. The reciprocal operator is \texttt{SUB}. To check
the reciprocity we can use for instance:
 
<<examplePAR,fig=F,eval=T>>=
choosebank("emblTP")
query("A","T=TRNA", virtual=TRUE)
query("B","PAR A", virtual=TRUE)
query("C","SUB B", virtual=TRUE)
query("D","PAR C", virtual=TRUE)
query("emptySet", "B AND NOT D", virtual=TRUE)
emptySet$nelem
closebank()
@

\subsubsection{\texttt{SUB}}

This is a unary operator to add all subsequences of members of the single list operand.

<<exampleSUB,fig=F,eval=T>>=
choosebank("emblTP")
query("SUBexample","AC=AE000783",virtual=T)
SUBexample$nelem
 query("SUBexample2","SUB SUBexample",virtual=T)
SUBexample2$nelem
closebank()
@

\subsubsection{\texttt{PS}}

This unary operator is used to get the list of species attached to member 
sequences of the operand list.

<<examplePS,fig=F,eval=T>>=
choosebank("emblTP")
query("PSexample","K=hyperthermo@",virtual=T)
query("PSexample2","PS PSexample")
sapply(PSexample2$req, getName)
closebank()
@

\subsubsection{\texttt{PK}}

This unary operator is used to get the list of keywords attached to member sequences 
of the operand list.

<<examplePK,fig=F,eval=T>>=
choosebank("emblTP")
query("PKexample","AC=AE000783",virtual=T)
query("PKexample2","PK PKexample")
sapply(PKexample2$req, getName)
closebank()
@

\subsubsection{\texttt{UN}}

This unary operator is used to get the list of sequences attached to a list
of species or keywords.

<<exampleUN,fig=F,eval=T>>=
choosebank("emblTP")
fileSP <- system.file("sequences/bb.sp", package = "seqinr")
cat(readLines(fileSP),sep="\n")
clfcd("listSP", file = fileSP, type = "SP")
query("UNexample", "UN listSP", virtual = TRUE)
UNexample$nelem 
closebank()
@

\subsubsection{\texttt{SD}}

This unary operator computes the list of species placed in the tree below the members of the 
species list operand.

<<exampleSD,fig=F,eval=T>>=
choosebank("emblTP")
query("hominidae","SP=Hominidae",virtual=T)
query("hsp","PS hominidae",virtual=T)
hsp$nelem
query("SDexample","SD hsp")
sapply(SDexample$req, getName) 
closebank()
@

\subsubsection{\texttt{KD}}

This unary operator computes the list of keywords placed in the tree below the members of the 
keywords list operand.

<<exampleKD,fig=F,eval=T>>=
choosebank("emblTP")
query("hominidae","SP=Hominidae",virtual=T)
query("hkw","PK hominidae",virtual=T)
hkw$nelem
query("KDexample","KD hkw", virtual=TRUE)
KDexample$nelem
closebank()
@

\SweaveInput{../config/sessionInfo.rnw}

% END - DO NOT REMOVE THIS LINE

%%%%%%%%%%%%  BIBLIOGRAPHY %%%%%%%%%%%%%%%%%
\clearpage
\addcontentsline{toc}{section}{References}
\bibliographystyle{plain}
\bibliography{../config/book}
\end{document}
